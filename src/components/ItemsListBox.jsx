import React from 'react';import i18n from 'i18n-js';import DataService from '../DataService.jsx';import ModalInfo from './ModalInfo.jsx';import ItemRow from './ItemRow.jsx';import FilterPanel from './FilterPanel.jsx';var ItemsListBox = React.createClass({  typeSelected: function(types) { this.setState({ onlyTypes: types }) },  slotSelected: function(slots) { this.setState({ onlySlots: slots }) },  eventSelected: function(events) { this.setState({ onlyEvents: events }) },  boostSelected: function(boosts) { this.setState({ onlyBoosts: boosts }) },  getInitialState: function() {    return {      onlyTypes: ['Cores'],      onlyEvents: [],      onlyBoosts: [], //['1', '2', '3'],      onlyBoosts: ['0', '30', '35'],      onlySlots: [],    };  },  componentWillMount: function() {    this.DataService = DataService();  },  isItemSelected: function(id) {    return this.props.isItemSelected(id);  },  openItemInfo: function(id) {    this.refs.modal.open(id);  },  getFilteredData: function(onlyTypes, onlySlots) {    var filteredData = this.DataService.getFilteredData(      onlyTypes,      this.state.onlyEvents,      [],      onlySlots    );    return filteredData.map(function(item, index) {      return (        <ItemRow clsName='first-row' item={item} key={"item-"+index}          selected={this.isItemSelected(item.href)}          ref={'row-item-'+item.href}          onItemSelected={this.props.onItemSelected}          openItemInfo={this.openItemInfo} />      )    }, this);  },  getFilteredDataWithAllBoosts: function(onlyTypes, onlySlots) {    var filteredData = this.DataService.getFilteredData(      onlyTypes,      this.state.onlyEvents,      [],      onlySlots    );    return filteredData.map(function(item, index) {      return (        <ItemRow clsName='first-row' item={item} key={"item-"+index}          selected={this.isItemSelected(item.href)}          ref={'row-item-'+item.href}          onItemSelected={this.props.onItemSelected}          openItemInfo={this.openItemInfo} />      )    }, this);  },  getBoostFilteredNodes: function(onlyTypes, onlySlots) {    var filteredData = this.DataService.getBoostFilteredData(      onlyTypes,      this.state.onlyEvents,      this.state.onlyBoosts,      onlySlots    );    if (this.state.onlyBoosts.length === 1) {      filteredData = this.DataService.sortByBoost(filteredData, this.state.onlyBoosts[0]);    } else if (this.state.onlyBoosts.length > 1) {      filteredData = this.DataService.sortByMultiBoost(filteredData, this.state.onlyBoosts);    }    var rowClass, firstRow;    return filteredData.map(function(item, index) {      firstRow = true;      var currRowSpan = 0;      // TODO: is optimize needed?      this.state.onlyBoosts.forEach(function(boost) {        var boostId = boost.toString();        var boost = item.stats_info[boostId];        if (boost) currRowSpan += 1;      }, this);      return this.state.onlyBoosts.map(function(boost, index) {        var boostId = boost.toString();        var boost = item.stats_info[boostId];        if (boost !== undefined) {          if (firstRow) {            rowClass = 'first-row';            firstRow = false;          } else {            rowClass = null;          }          return (            <ItemRow clsName={rowClass} item={item} key={"item-"+index}              rowSpan={currRowSpan}              selected={this.isItemSelected(item.href)}              ref={'row-item-'+item.href}              boostId={boostId.toString()}              onItemSelected={this.props.onItemSelected}              openItemInfo={this.openItemInfo} />          )        } else {          return null;        }      }, this);    }, this);  },  filterFunc: function(onlyTypes, onlySlots) {    if (this.state.onlyBoosts.length === 0) {      return this.getFilteredData(onlyTypes, onlySlots);    } else {      return this.getBoostFilteredNodes(onlyTypes, onlySlots);    }  },  getCoreNode: function(slot) {    if (this.state.onlySlots.length === 0 || this.state.onlySlots.indexOf(slot) >= 0) {      var nodes = this.filterFunc(['Core'], [slot]);      if (nodes.length === 0) return null      else {        var header = i18n.t('items-list.'+slot) + ': ' + nodes.length;        header += i18n.t('items-list.items');        return (          <div>            <h4>{header}</h4>            <table className={"cores-list-"+slot}><tbody>              {nodes}            </tbody></table>          </div>        )      }    } else return null;  },  render: function() {    if (!this.DataService || !this.DataService.isReady()) return null;    var coreNode = null;    var pieceNode = null;    var recipeNode = null;    if (this.state.onlyTypes.indexOf('Cores') >= 0) {      coreNode = (        <div>          {this.getCoreNode('Helm')}          {this.getCoreNode('Armor')}          {this.getCoreNode('Feet')}          {this.getCoreNode('Weapon')}          {this.getCoreNode('Accessory')}        </div>      );    };    if (this.state.onlyTypes.indexOf('Pieces') >= 0) {      var pieces = this.filterFunc(['Piece'], []);      if (pieces.length > 0) pieceNode = (        <div>          <h4>Pieces: {pieces.length} items</h4>          <table className="pieces-list"><tbody>            {pieces}          </tbody></table>        </div>      );    };    if (this.state.onlyTypes.indexOf('Crafting Recipes') >= 0) {      var recipes = this.filterFunc(['Crafting Recipes'], []);      if (recipes.length > 0) recipeNode = (        <div>          <h4>Recipes: {recipes.length} items</h4>          <table className="recipes-list"><tbody>            {recipes}          </tbody></table>        </div>      );    };    return (      <div className='cores-list-box'>        <ModalInfo ref="modal"/>        <div className="filter-panel">          <FilterPanel            onTypeSelected={this.typeSelected}            onSlotSelected={this.slotSelected}            onEventSelected={this.eventSelected}            onBoostSelected={this.boostSelected}          />        </div>        <div className='scrollable-items-list'>          {coreNode}          {pieceNode}          {recipeNode}        </div>      </div>    );  },});module.exports = ItemsListBox;